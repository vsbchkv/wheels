(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n\n  var SpriteSymbol = function SpriteSymbol(ref) {\n    var id = ref.id;\n    var viewBox = ref.viewBox;\n    var content = ref.content;\n    this.id = id;\n    this.viewBox = viewBox;\n    this.content = content;\n  };\n  /**\n   * @return {string}\n   */\n\n\n  SpriteSymbol.prototype.stringify = function stringify() {\n    return this.content;\n  };\n  /**\n   * @return {string}\n   */\n\n\n  SpriteSymbol.prototype.toString = function toString() {\n    return this.stringify();\n  };\n\n  SpriteSymbol.prototype.destroy = function destroy() {\n    var this$1 = this;\n    ['id', 'viewBox', 'content'].forEach(function (prop) {\n      return delete this$1[prop];\n    });\n  };\n  /**\n   * @param {string} content\n   * @return {Element}\n   */\n\n\n  var parse = function (content) {\n    var hasImportNode = !!document.importNode;\n    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;\n    /**\n     * Fix for browser which are throwing WrongDocumentError\n     * if you insert an element which is not part of the document\n     * @see http://stackoverflow.com/a/7986519/4624403\n     */\n\n    if (hasImportNode) {\n      return document.importNode(doc, true);\n    }\n\n    return doc;\n  };\n\n  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  var deepmerge = createCommonjsModule(function (module, exports) {\n    (function (root, factory) {\n      if (false) {} else {\n        module.exports = factory();\n      }\n    })(commonjsGlobal, function () {\n      function isMergeableObject(val) {\n        var nonNullObject = val && typeof val === 'object';\n        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';\n      }\n\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n\n      function cloneIfNecessary(value, optionsArgument) {\n        var clone = optionsArgument && optionsArgument.clone === true;\n        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;\n      }\n\n      function defaultArrayMerge(target, source, optionsArgument) {\n        var destination = target.slice();\n        source.forEach(function (e, i) {\n          if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n          } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument);\n          } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument));\n          }\n        });\n        return destination;\n      }\n\n      function mergeObject(target, source, optionsArgument) {\n        var destination = {};\n\n        if (isMergeableObject(target)) {\n          Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n          });\n        }\n\n        Object.keys(source).forEach(function (key) {\n          if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n          } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument);\n          }\n        });\n        return destination;\n      }\n\n      function deepmerge(target, source, optionsArgument) {\n        var array = Array.isArray(source);\n        var options = optionsArgument || {\n          arrayMerge: defaultArrayMerge\n        };\n        var arrayMerge = options.arrayMerge || defaultArrayMerge;\n\n        if (array) {\n          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);\n        } else {\n          return mergeObject(target, source, optionsArgument);\n        }\n      }\n\n      deepmerge.all = function deepmergeAll(array, optionsArgument) {\n        if (!Array.isArray(array) || array.length < 2) {\n          throw new Error('first argument should be an array with at least two elements');\n        } // we are sure there are at least 2 values, so it is safe to have no initial value\n\n\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, optionsArgument);\n        });\n      };\n\n      return deepmerge;\n    });\n  });\n  var namespaces_1 = createCommonjsModule(function (module, exports) {\n    var namespaces = {\n      svg: {\n        name: 'xmlns',\n        uri: 'http://www.w3.org/2000/svg'\n      },\n      xlink: {\n        name: 'xmlns:xlink',\n        uri: 'http://www.w3.org/1999/xlink'\n      }\n    };\n    exports.default = namespaces;\n    module.exports = exports.default;\n  });\n  /**\n   * @param {Object} attrs\n   * @return {string}\n   */\n\n  var objectToAttrsString = function (attrs) {\n    return Object.keys(attrs).map(function (attr) {\n      var value = attrs[attr].toString().replace(/\"/g, '&quot;');\n      return attr + \"=\\\"\" + value + \"\\\"\";\n    }).join(' ');\n  };\n\n  var svg = namespaces_1.svg;\n  var xlink = namespaces_1.xlink;\n  var defaultAttrs = {};\n  defaultAttrs[svg.name] = svg.uri;\n  defaultAttrs[xlink.name] = xlink.uri;\n  /**\n   * @param {string} [content]\n   * @param {Object} [attributes]\n   * @return {string}\n   */\n\n  var wrapInSvgString = function (content, attributes) {\n    if (content === void 0) content = '';\n    var attrs = deepmerge(defaultAttrs, attributes || {});\n    var attrsRendered = objectToAttrsString(attrs);\n    return \"<svg \" + attrsRendered + \">\" + content + \"</svg>\";\n  };\n\n  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {\n    function BrowserSpriteSymbol() {\n      SpriteSymbol$$1.apply(this, arguments);\n    }\n\n    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;\n    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);\n    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n    /**\n     * @param {Element} node\n     * @return {BrowserSpriteSymbol}\n     */\n\n\n    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {\n      return new BrowserSpriteSymbol({\n        id: node.getAttribute('id'),\n        viewBox: node.getAttribute('viewBox'),\n        content: node.outerHTML\n      });\n    };\n\n    BrowserSpriteSymbol.prototype.destroy = function destroy() {\n      if (this.isMounted) {\n        this.unmount();\n      }\n\n      SpriteSymbol$$1.prototype.destroy.call(this);\n    };\n    /**\n     * @param {Element|string} target\n     * @return {Element}\n     */\n\n\n    BrowserSpriteSymbol.prototype.mount = function mount(target) {\n      if (this.isMounted) {\n        return this.node;\n      }\n\n      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = this.render();\n      this.node = node;\n      mountTarget.appendChild(node);\n      return node;\n    };\n    /**\n     * @return {Element}\n     */\n\n\n    BrowserSpriteSymbol.prototype.render = function render() {\n      var content = this.stringify();\n      return parse(wrapInSvgString(content)).childNodes[0];\n    };\n\n    BrowserSpriteSymbol.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n\n    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);\n    return BrowserSpriteSymbol;\n  }(SpriteSymbol);\n\n  return BrowserSpriteSymbol;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? module.exports = factory() : undefined;\n})(this, function () {\n  'use strict';\n\n  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  var deepmerge = createCommonjsModule(function (module, exports) {\n    (function (root, factory) {\n      if (false) {} else {\n        module.exports = factory();\n      }\n    })(commonjsGlobal, function () {\n      function isMergeableObject(val) {\n        var nonNullObject = val && typeof val === 'object';\n        return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';\n      }\n\n      function emptyTarget(val) {\n        return Array.isArray(val) ? [] : {};\n      }\n\n      function cloneIfNecessary(value, optionsArgument) {\n        var clone = optionsArgument && optionsArgument.clone === true;\n        return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;\n      }\n\n      function defaultArrayMerge(target, source, optionsArgument) {\n        var destination = target.slice();\n        source.forEach(function (e, i) {\n          if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n          } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument);\n          } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument));\n          }\n        });\n        return destination;\n      }\n\n      function mergeObject(target, source, optionsArgument) {\n        var destination = {};\n\n        if (isMergeableObject(target)) {\n          Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n          });\n        }\n\n        Object.keys(source).forEach(function (key) {\n          if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n          } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument);\n          }\n        });\n        return destination;\n      }\n\n      function deepmerge(target, source, optionsArgument) {\n        var array = Array.isArray(source);\n        var options = optionsArgument || {\n          arrayMerge: defaultArrayMerge\n        };\n        var arrayMerge = options.arrayMerge || defaultArrayMerge;\n\n        if (array) {\n          return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);\n        } else {\n          return mergeObject(target, source, optionsArgument);\n        }\n      }\n\n      deepmerge.all = function deepmergeAll(array, optionsArgument) {\n        if (!Array.isArray(array) || array.length < 2) {\n          throw new Error('first argument should be an array with at least two elements');\n        } // we are sure there are at least 2 values, so it is safe to have no initial value\n\n\n        return array.reduce(function (prev, next) {\n          return deepmerge(prev, next, optionsArgument);\n        });\n      };\n\n      return deepmerge;\n    });\n  }); //      \n  // An event handler can take an optional event argument\n  // and should not return a value\n  // An array of all currently registered event handlers for a type\n  // A map of event types and their corresponding event handlers.\n\n  /** Mitt: Tiny (~200b) functional event emitter / pubsub.\n   *  @name mitt\n   *  @returns {Mitt}\n   */\n\n  function mitt(all) {\n    all = all || Object.create(null);\n    return {\n      /**\n       * Register an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to listen for, or `\"*\"` for all events\n       * @param  {Function} handler Function to call in response to given event\n       * @memberOf mitt\n       */\n      on: function on(type, handler) {\n        (all[type] || (all[type] = [])).push(handler);\n      },\n\n      /**\n       * Remove an event handler for the given type.\n       *\n       * @param  {String} type\tType of event to unregister `handler` from, or `\"*\"`\n       * @param  {Function} handler Handler function to remove\n       * @memberOf mitt\n       */\n      off: function off(type, handler) {\n        if (all[type]) {\n          all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n        }\n      },\n\n      /**\n       * Invoke all handlers for the given type.\n       * If present, `\"*\"` handlers are invoked after type-matched handlers.\n       *\n       * @param {String} type  The event type to invoke\n       * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler\n       * @memberof mitt\n       */\n      emit: function emit(type, evt) {\n        (all[type] || []).map(function (handler) {\n          handler(evt);\n        });\n        (all['*'] || []).map(function (handler) {\n          handler(type, evt);\n        });\n      }\n    };\n  }\n\n  var namespaces_1 = createCommonjsModule(function (module, exports) {\n    var namespaces = {\n      svg: {\n        name: 'xmlns',\n        uri: 'http://www.w3.org/2000/svg'\n      },\n      xlink: {\n        name: 'xmlns:xlink',\n        uri: 'http://www.w3.org/1999/xlink'\n      }\n    };\n    exports.default = namespaces;\n    module.exports = exports.default;\n  });\n  /**\n   * @param {Object} attrs\n   * @return {string}\n   */\n\n  var objectToAttrsString = function (attrs) {\n    return Object.keys(attrs).map(function (attr) {\n      var value = attrs[attr].toString().replace(/\"/g, '&quot;');\n      return attr + \"=\\\"\" + value + \"\\\"\";\n    }).join(' ');\n  };\n\n  var svg = namespaces_1.svg;\n  var xlink = namespaces_1.xlink;\n  var defaultAttrs = {};\n  defaultAttrs[svg.name] = svg.uri;\n  defaultAttrs[xlink.name] = xlink.uri;\n  /**\n   * @param {string} [content]\n   * @param {Object} [attributes]\n   * @return {string}\n   */\n\n  var wrapInSvgString = function (content, attributes) {\n    if (content === void 0) content = '';\n    var attrs = deepmerge(defaultAttrs, attributes || {});\n    var attrsRendered = objectToAttrsString(attrs);\n    return \"<svg \" + attrsRendered + \">\" + content + \"</svg>\";\n  };\n\n  var svg$1 = namespaces_1.svg;\n  var xlink$1 = namespaces_1.xlink;\n  var defaultConfig = {\n    attrs: (obj = {\n      style: ['position: absolute', 'width: 0', 'height: 0'].join('; '),\n      'aria-hidden': 'true'\n    }, obj[svg$1.name] = svg$1.uri, obj[xlink$1.name] = xlink$1.uri, obj)\n  };\n  var obj;\n\n  var Sprite = function Sprite(config) {\n    this.config = deepmerge(defaultConfig, config || {});\n    this.symbols = [];\n  };\n  /**\n   * Add new symbol. If symbol with the same id exists it will be replaced.\n   * @param {SpriteSymbol} symbol\n   * @return {boolean} `true` - symbol was added, `false` - replaced\n   */\n\n\n  Sprite.prototype.add = function add(symbol) {\n    var ref = this;\n    var symbols = ref.symbols;\n    var existing = this.find(symbol.id);\n\n    if (existing) {\n      symbols[symbols.indexOf(existing)] = symbol;\n      return false;\n    }\n\n    symbols.push(symbol);\n    return true;\n  };\n  /**\n   * Remove symbol & destroy it\n   * @param {string} id\n   * @return {boolean} `true` - symbol was found & successfully destroyed, `false` - otherwise\n   */\n\n\n  Sprite.prototype.remove = function remove(id) {\n    var ref = this;\n    var symbols = ref.symbols;\n    var symbol = this.find(id);\n\n    if (symbol) {\n      symbols.splice(symbols.indexOf(symbol), 1);\n      symbol.destroy();\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @param {string} id\n   * @return {SpriteSymbol|null}\n   */\n\n\n  Sprite.prototype.find = function find(id) {\n    return this.symbols.filter(function (s) {\n      return s.id === id;\n    })[0] || null;\n  };\n  /**\n   * @param {string} id\n   * @return {boolean}\n   */\n\n\n  Sprite.prototype.has = function has(id) {\n    return this.find(id) !== null;\n  };\n  /**\n   * @return {string}\n   */\n\n\n  Sprite.prototype.stringify = function stringify() {\n    var ref = this.config;\n    var attrs = ref.attrs;\n    var stringifiedSymbols = this.symbols.map(function (s) {\n      return s.stringify();\n    }).join('');\n    return wrapInSvgString(stringifiedSymbols, attrs);\n  };\n  /**\n   * @return {string}\n   */\n\n\n  Sprite.prototype.toString = function toString() {\n    return this.stringify();\n  };\n\n  Sprite.prototype.destroy = function destroy() {\n    this.symbols.forEach(function (s) {\n      return s.destroy();\n    });\n  };\n\n  var SpriteSymbol = function SpriteSymbol(ref) {\n    var id = ref.id;\n    var viewBox = ref.viewBox;\n    var content = ref.content;\n    this.id = id;\n    this.viewBox = viewBox;\n    this.content = content;\n  };\n  /**\n   * @return {string}\n   */\n\n\n  SpriteSymbol.prototype.stringify = function stringify() {\n    return this.content;\n  };\n  /**\n   * @return {string}\n   */\n\n\n  SpriteSymbol.prototype.toString = function toString() {\n    return this.stringify();\n  };\n\n  SpriteSymbol.prototype.destroy = function destroy() {\n    var this$1 = this;\n    ['id', 'viewBox', 'content'].forEach(function (prop) {\n      return delete this$1[prop];\n    });\n  };\n  /**\n   * @param {string} content\n   * @return {Element}\n   */\n\n\n  var parse = function (content) {\n    var hasImportNode = !!document.importNode;\n    var doc = new DOMParser().parseFromString(content, 'image/svg+xml').documentElement;\n    /**\n     * Fix for browser which are throwing WrongDocumentError\n     * if you insert an element which is not part of the document\n     * @see http://stackoverflow.com/a/7986519/4624403\n     */\n\n    if (hasImportNode) {\n      return document.importNode(doc, true);\n    }\n\n    return doc;\n  };\n\n  var BrowserSpriteSymbol = function (SpriteSymbol$$1) {\n    function BrowserSpriteSymbol() {\n      SpriteSymbol$$1.apply(this, arguments);\n    }\n\n    if (SpriteSymbol$$1) BrowserSpriteSymbol.__proto__ = SpriteSymbol$$1;\n    BrowserSpriteSymbol.prototype = Object.create(SpriteSymbol$$1 && SpriteSymbol$$1.prototype);\n    BrowserSpriteSymbol.prototype.constructor = BrowserSpriteSymbol;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n    /**\n     * @param {Element} node\n     * @return {BrowserSpriteSymbol}\n     */\n\n\n    BrowserSpriteSymbol.createFromExistingNode = function createFromExistingNode(node) {\n      return new BrowserSpriteSymbol({\n        id: node.getAttribute('id'),\n        viewBox: node.getAttribute('viewBox'),\n        content: node.outerHTML\n      });\n    };\n\n    BrowserSpriteSymbol.prototype.destroy = function destroy() {\n      if (this.isMounted) {\n        this.unmount();\n      }\n\n      SpriteSymbol$$1.prototype.destroy.call(this);\n    };\n    /**\n     * @param {Element|string} target\n     * @return {Element}\n     */\n\n\n    BrowserSpriteSymbol.prototype.mount = function mount(target) {\n      if (this.isMounted) {\n        return this.node;\n      }\n\n      var mountTarget = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = this.render();\n      this.node = node;\n      mountTarget.appendChild(node);\n      return node;\n    };\n    /**\n     * @return {Element}\n     */\n\n\n    BrowserSpriteSymbol.prototype.render = function render() {\n      var content = this.stringify();\n      return parse(wrapInSvgString(content)).childNodes[0];\n    };\n\n    BrowserSpriteSymbol.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n\n    Object.defineProperties(BrowserSpriteSymbol.prototype, prototypeAccessors);\n    return BrowserSpriteSymbol;\n  }(SpriteSymbol);\n\n  var defaultConfig$1 = {\n    /**\n     * Should following options be automatically configured:\n     * - `syncUrlsWithBaseTag`\n     * - `locationChangeAngularEmitter`\n     * - `moveGradientsOutsideSymbol`\n     * @type {boolean}\n     */\n    autoConfigure: true,\n\n    /**\n     * Default mounting selector\n     * @type {string}\n     */\n    mountTo: 'body',\n\n    /**\n     * Fix disappearing SVG elements when <base href> exists.\n     * Executes when sprite mounted.\n     * @see http://stackoverflow.com/a/18265336/796152\n     * @see https://github.com/everdimension/angular-svg-base-fix\n     * @see https://github.com/angular/angular.js/issues/8934#issuecomment-56568466\n     * @type {boolean}\n     */\n    syncUrlsWithBaseTag: false,\n\n    /**\n     * Should sprite listen custom location change event\n     * @type {boolean}\n     */\n    listenLocationChangeEvent: true,\n\n    /**\n     * Custom window event name which should be emitted to update sprite urls\n     * @type {string}\n     */\n    locationChangeEvent: 'locationChange',\n\n    /**\n     * Emit location change event in Angular automatically\n     * @type {boolean}\n     */\n    locationChangeAngularEmitter: false,\n\n    /**\n     * Selector to find symbols usages when updating sprite urls\n     * @type {string}\n     */\n    usagesToUpdate: 'use[*|href]',\n\n    /**\n     * Fix Firefox bug when gradients and patterns don't work if they are within a symbol.\n     * Executes when sprite is rendered, but not mounted.\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=306674\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575\n     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=1235364\n     * @type {boolean}\n     */\n    moveGradientsOutsideSymbol: false\n  };\n  /**\n   * @param {*} arrayLike\n   * @return {Array}\n   */\n\n  var arrayFrom = function (arrayLike) {\n    return Array.prototype.slice.call(arrayLike, 0);\n  };\n\n  var browser = {\n    isChrome: function () {\n      return /chrome/i.test(navigator.userAgent);\n    },\n    isFirefox: function () {\n      return /firefox/i.test(navigator.userAgent);\n    },\n    // https://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx\n    isIE: function () {\n      return /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);\n    },\n    isEdge: function () {\n      return /edge/i.test(navigator.userAgent);\n    }\n  };\n  /**\n   * @param {string} name\n   * @param {*} data\n   */\n\n  var dispatchEvent = function (name, data) {\n    var event = document.createEvent('CustomEvent');\n    event.initCustomEvent(name, false, false, data);\n    window.dispatchEvent(event);\n  };\n  /**\n   * IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n   * This trick will trigger IE to read and use any existing SVG <style> tags.\n   * @see https://github.com/iconic/SVGInjector/issues/23\n   * @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n   *\n   * @param {Element} node DOM Element to search <style> tags in\n   * @return {Array<HTMLStyleElement>}\n   */\n\n\n  var evalStylesIEWorkaround = function (node) {\n    var updatedNodes = [];\n    arrayFrom(node.querySelectorAll('style')).forEach(function (style) {\n      style.textContent += '';\n      updatedNodes.push(style);\n    });\n    return updatedNodes;\n  };\n  /**\n   * @param {string} [url] If not provided - current URL will be used\n   * @return {string}\n   */\n\n\n  var getUrlWithoutFragment = function (url) {\n    return (url || window.location.href).split('#')[0];\n  };\n  /* global angular */\n\n  /**\n   * @param {string} eventName\n   */\n\n\n  var locationChangeAngularEmitter = function (eventName) {\n    angular.module('ng').run(['$rootScope', function ($rootScope) {\n      $rootScope.$on('$locationChangeSuccess', function (e, newUrl, oldUrl) {\n        dispatchEvent(eventName, {\n          oldUrl: oldUrl,\n          newUrl: newUrl\n        });\n      });\n    }]);\n  };\n\n  var defaultSelector = 'linearGradient, radialGradient, pattern, mask, clipPath';\n  /**\n   * @param {Element} svg\n   * @param {string} [selector]\n   * @return {Element}\n   */\n\n  var moveGradientsOutsideSymbol = function (svg, selector) {\n    if (selector === void 0) selector = defaultSelector;\n    arrayFrom(svg.querySelectorAll('symbol')).forEach(function (symbol) {\n      arrayFrom(symbol.querySelectorAll(selector)).forEach(function (node) {\n        symbol.parentNode.insertBefore(node, symbol);\n      });\n    });\n    return svg;\n  };\n  /**\n   * @param {NodeList} nodes\n   * @param {Function} [matcher]\n   * @return {Attr[]}\n   */\n\n\n  function selectAttributes(nodes, matcher) {\n    var attrs = arrayFrom(nodes).reduce(function (acc, node) {\n      if (!node.attributes) {\n        return acc;\n      }\n\n      var arrayfied = arrayFrom(node.attributes);\n      var matched = matcher ? arrayfied.filter(matcher) : arrayfied;\n      return acc.concat(matched);\n    }, []);\n    return attrs;\n  }\n  /**\n   * @param {NodeList|Node} nodes\n   * @param {boolean} [clone=true]\n   * @return {string}\n   */\n\n\n  var xLinkNS = namespaces_1.xlink.uri;\n  var xLinkAttrName = 'xlink:href'; // eslint-disable-next-line no-useless-escape\n\n  var specialUrlCharsPattern = /[{}|\\\\\\^\\[\\]`\"<>]/g;\n\n  function encoder(url) {\n    return url.replace(specialUrlCharsPattern, function (match) {\n      return \"%\" + match[0].charCodeAt(0).toString(16).toUpperCase();\n    });\n  }\n\n  function escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n  }\n  /**\n   * @param {NodeList} nodes\n   * @param {string} startsWith\n   * @param {string} replaceWith\n   * @return {NodeList}\n   */\n\n\n  function updateReferences(nodes, startsWith, replaceWith) {\n    arrayFrom(nodes).forEach(function (node) {\n      var href = node.getAttribute(xLinkAttrName);\n\n      if (href && href.indexOf(startsWith) === 0) {\n        var newUrl = href.replace(startsWith, replaceWith);\n        node.setAttributeNS(xLinkNS, xLinkAttrName, newUrl);\n      }\n    });\n    return nodes;\n  }\n  /**\n   * List of SVG attributes to update url() target in them\n   */\n\n\n  var attList = ['clipPath', 'colorProfile', 'src', 'cursor', 'fill', 'filter', 'marker', 'markerStart', 'markerMid', 'markerEnd', 'mask', 'stroke', 'style'];\n  var attSelector = attList.map(function (attr) {\n    return \"[\" + attr + \"]\";\n  }).join(',');\n  /**\n   * Update URLs in svg image (like `fill=\"url(...)\"`) and update referencing elements\n   * @param {Element} svg\n   * @param {NodeList} references\n   * @param {string|RegExp} startsWith\n   * @param {string} replaceWith\n   * @return {void}\n   *\n   * @example\n   * const sprite = document.querySelector('svg.sprite');\n   * const usages = document.querySelectorAll('use');\n   * updateUrls(sprite, usages, '#', 'prefix#');\n   */\n\n  var updateUrls = function (svg, references, startsWith, replaceWith) {\n    var startsWithEncoded = encoder(startsWith);\n    var replaceWithEncoded = encoder(replaceWith);\n    var nodes = svg.querySelectorAll(attSelector);\n    var attrs = selectAttributes(nodes, function (ref) {\n      var localName = ref.localName;\n      var value = ref.value;\n      return attList.indexOf(localName) !== -1 && value.indexOf(\"url(\" + startsWithEncoded) !== -1;\n    });\n    attrs.forEach(function (attr) {\n      return attr.value = attr.value.replace(new RegExp(escapeRegExp(startsWithEncoded), 'g'), replaceWithEncoded);\n    });\n    updateReferences(references, startsWithEncoded, replaceWithEncoded);\n  };\n  /**\n   * Internal emitter events\n   * @enum\n   * @private\n   */\n\n\n  var Events = {\n    MOUNT: 'mount',\n    SYMBOL_MOUNT: 'symbol_mount'\n  };\n\n  var BrowserSprite = function (Sprite$$1) {\n    function BrowserSprite(cfg) {\n      var this$1 = this;\n      if (cfg === void 0) cfg = {};\n      Sprite$$1.call(this, deepmerge(defaultConfig$1, cfg));\n      var emitter = mitt();\n      this._emitter = emitter;\n      this.node = null;\n      var ref = this;\n      var config = ref.config;\n\n      if (config.autoConfigure) {\n        this._autoConfigure(cfg);\n      }\n\n      if (config.syncUrlsWithBaseTag) {\n        var baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\n        emitter.on(Events.MOUNT, function () {\n          return this$1.updateUrls('#', baseUrl);\n        });\n      }\n\n      var handleLocationChange = this._handleLocationChange.bind(this);\n\n      this._handleLocationChange = handleLocationChange; // Provide way to update sprite urls externally via dispatching custom window event\n\n      if (config.listenLocationChangeEvent) {\n        window.addEventListener(config.locationChangeEvent, handleLocationChange);\n      } // Emit location change event in Angular automatically\n\n\n      if (config.locationChangeAngularEmitter) {\n        locationChangeAngularEmitter(config.locationChangeEvent);\n      } // After sprite mounted\n\n\n      emitter.on(Events.MOUNT, function (spriteNode) {\n        if (config.moveGradientsOutsideSymbol) {\n          moveGradientsOutsideSymbol(spriteNode);\n        }\n      }); // After symbol mounted into sprite\n\n      emitter.on(Events.SYMBOL_MOUNT, function (symbolNode) {\n        if (config.moveGradientsOutsideSymbol) {\n          moveGradientsOutsideSymbol(symbolNode.parentNode);\n        }\n\n        if (browser.isIE() || browser.isEdge()) {\n          evalStylesIEWorkaround(symbolNode);\n        }\n      });\n    }\n\n    if (Sprite$$1) BrowserSprite.__proto__ = Sprite$$1;\n    BrowserSprite.prototype = Object.create(Sprite$$1 && Sprite$$1.prototype);\n    BrowserSprite.prototype.constructor = BrowserSprite;\n    var prototypeAccessors = {\n      isMounted: {}\n    };\n    /**\n     * @return {boolean}\n     */\n\n    prototypeAccessors.isMounted.get = function () {\n      return !!this.node;\n    };\n    /**\n     * Automatically configure following options\n     * - `syncUrlsWithBaseTag`\n     * - `locationChangeAngularEmitter`\n     * - `moveGradientsOutsideSymbol`\n     * @param {Object} cfg\n     * @private\n     */\n\n\n    BrowserSprite.prototype._autoConfigure = function _autoConfigure(cfg) {\n      var ref = this;\n      var config = ref.config;\n\n      if (typeof cfg.syncUrlsWithBaseTag === 'undefined') {\n        config.syncUrlsWithBaseTag = typeof document.getElementsByTagName('base')[0] !== 'undefined';\n      }\n\n      if (typeof cfg.locationChangeAngularEmitter === 'undefined') {\n        config.locationChangeAngularEmitter = typeof window.angular !== 'undefined';\n      }\n\n      if (typeof cfg.moveGradientsOutsideSymbol === 'undefined') {\n        config.moveGradientsOutsideSymbol = browser.isFirefox();\n      }\n    };\n    /**\n     * @param {Event} event\n     * @param {Object} event.detail\n     * @param {string} event.detail.oldUrl\n     * @param {string} event.detail.newUrl\n     * @private\n     */\n\n\n    BrowserSprite.prototype._handleLocationChange = function _handleLocationChange(event) {\n      var ref = event.detail;\n      var oldUrl = ref.oldUrl;\n      var newUrl = ref.newUrl;\n      this.updateUrls(oldUrl, newUrl);\n    };\n    /**\n     * Add new symbol. If symbol with the same id exists it will be replaced.\n     * If sprite already mounted - `symbol.mount(sprite.node)` will be called.\n     * @fires Events#SYMBOL_MOUNT\n     * @param {BrowserSpriteSymbol} symbol\n     * @return {boolean} `true` - symbol was added, `false` - replaced\n     */\n\n\n    BrowserSprite.prototype.add = function add(symbol) {\n      var sprite = this;\n      var isNewSymbol = Sprite$$1.prototype.add.call(this, symbol);\n\n      if (this.isMounted && isNewSymbol) {\n        symbol.mount(sprite.node);\n\n        this._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);\n      }\n\n      return isNewSymbol;\n    };\n    /**\n     * Attach to existing DOM node\n     * @param {string|Element} target\n     * @return {Element|null} attached DOM Element. null if node to attach not found.\n     */\n\n\n    BrowserSprite.prototype.attach = function attach(target) {\n      var this$1 = this;\n      var sprite = this;\n\n      if (sprite.isMounted) {\n        return sprite.node;\n      }\n      /** @type Element */\n\n\n      var node = typeof target === 'string' ? document.querySelector(target) : target;\n      sprite.node = node; // Already added symbols needs to be mounted\n\n      this.symbols.forEach(function (symbol) {\n        symbol.mount(sprite.node);\n\n        this$1._emitter.emit(Events.SYMBOL_MOUNT, symbol.node);\n      }); // Create symbols from existing DOM nodes, add and mount them\n\n      arrayFrom(node.querySelectorAll('symbol')).forEach(function (symbolNode) {\n        var symbol = BrowserSpriteSymbol.createFromExistingNode(symbolNode);\n        symbol.node = symbolNode; // hack to prevent symbol mounting to sprite when adding\n\n        sprite.add(symbol);\n      });\n\n      this._emitter.emit(Events.MOUNT, node);\n\n      return node;\n    };\n\n    BrowserSprite.prototype.destroy = function destroy() {\n      var ref = this;\n      var config = ref.config;\n      var symbols = ref.symbols;\n      var _emitter = ref._emitter;\n      symbols.forEach(function (s) {\n        return s.destroy();\n      });\n\n      _emitter.off('*');\n\n      window.removeEventListener(config.locationChangeEvent, this._handleLocationChange);\n\n      if (this.isMounted) {\n        this.unmount();\n      }\n    };\n    /**\n     * @fires Events#MOUNT\n     * @param {string|Element} [target]\n     * @param {boolean} [prepend=false]\n     * @return {Element|null} rendered sprite node. null if mount node not found.\n     */\n\n\n    BrowserSprite.prototype.mount = function mount(target, prepend) {\n      if (target === void 0) target = this.config.mountTo;\n      if (prepend === void 0) prepend = false;\n      var sprite = this;\n\n      if (sprite.isMounted) {\n        return sprite.node;\n      }\n\n      var mountNode = typeof target === 'string' ? document.querySelector(target) : target;\n      var node = sprite.render();\n      this.node = node;\n\n      if (prepend && mountNode.childNodes[0]) {\n        mountNode.insertBefore(node, mountNode.childNodes[0]);\n      } else {\n        mountNode.appendChild(node);\n      }\n\n      this._emitter.emit(Events.MOUNT, node);\n\n      return node;\n    };\n    /**\n     * @return {Element}\n     */\n\n\n    BrowserSprite.prototype.render = function render() {\n      return parse(this.stringify());\n    };\n    /**\n     * Detach sprite from the DOM\n     */\n\n\n    BrowserSprite.prototype.unmount = function unmount() {\n      this.node.parentNode.removeChild(this.node);\n    };\n    /**\n     * Update URLs in sprite and usage elements\n     * @param {string} oldUrl\n     * @param {string} newUrl\n     * @return {boolean} `true` - URLs was updated, `false` - sprite is not mounted\n     */\n\n\n    BrowserSprite.prototype.updateUrls = function updateUrls$1(oldUrl, newUrl) {\n      if (!this.isMounted) {\n        return false;\n      }\n\n      var usages = document.querySelectorAll(this.config.usagesToUpdate);\n      updateUrls(this.node, usages, getUrlWithoutFragment(oldUrl) + \"#\", getUrlWithoutFragment(newUrl) + \"#\");\n      return true;\n    };\n\n    Object.defineProperties(BrowserSprite.prototype, prototypeAccessors);\n    return BrowserSprite;\n  }(Sprite);\n\n  var ready$1 = createCommonjsModule(function (module) {\n    /*!\n      * domready (c) Dustin Diaz 2014 - License MIT\n      */\n    !function (name, definition) {\n      {\n        module.exports = definition();\n      }\n    }('domready', function () {\n      var fns = [],\n          listener,\n          doc = document,\n          hack = doc.documentElement.doScroll,\n          domContentLoaded = 'DOMContentLoaded',\n          loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState);\n\n      if (!loaded) {\n        doc.addEventListener(domContentLoaded, listener = function () {\n          doc.removeEventListener(domContentLoaded, listener);\n          loaded = 1;\n\n          while (listener = fns.shift()) {\n            listener();\n          }\n        });\n      }\n\n      return function (fn) {\n        loaded ? setTimeout(fn, 0) : fns.push(fn);\n      };\n    });\n  });\n  var spriteNodeId = '__SVG_SPRITE_NODE__';\n  var spriteGlobalVarName = '__SVG_SPRITE__';\n  var isSpriteExists = !!window[spriteGlobalVarName]; // eslint-disable-next-line import/no-mutable-exports\n\n  var sprite;\n\n  if (isSpriteExists) {\n    sprite = window[spriteGlobalVarName];\n  } else {\n    sprite = new BrowserSprite({\n      attrs: {\n        id: spriteNodeId\n      }\n    });\n    window[spriteGlobalVarName] = sprite;\n  }\n\n  var loadSprite = function () {\n    /**\n     * Check for page already contains sprite node\n     * If found - attach to and reuse it's content\n     * If not - render and mount the new sprite\n     */\n    var existing = document.getElementById(spriteNodeId);\n\n    if (existing) {\n      sprite.attach(existing);\n    } else {\n      sprite.mount(document.body, true);\n    }\n  };\n\n  if (document.body) {\n    loadSprite();\n  } else {\n    ready$1(loadSprite);\n  }\n\n  var sprite$1 = sprite;\n  return sprite$1;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval('var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function("return this")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === "object") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLENBQUosQyxDQUVBOztBQUNBQSxDQUFDLEdBQUksWUFBVztBQUNmLFNBQU8sSUFBUDtBQUNBLENBRkcsRUFBSjs7QUFJQSxJQUFJO0FBQ0g7QUFDQUEsR0FBQyxHQUFHQSxDQUFDLElBQUksSUFBSUMsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUF0QixFQUFnQ0gsQ0FBQyxHQUFHRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLENBQWpCIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')}]]);